
using System;
using System.Data;
using System.Configuration;
using System.Collections.Generic;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;

using [ADAPTER_CLASS_NAMESPACE];
using [DOMAIN_OBJECT_NAMESPACE];

public partial class [FORM_CLASS_PREFACE]List : System.Web.UI.Page
{

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            bindGrid(null);
        }
    }
    

    private void bindGrid(GridViewSortEventArgs e)
    {
        try
        {
            [DOMAIN_OBJECT_NAME]Adapter adapter = new [DOMAIN_OBJECT_NAME]Adapter();
            [DOMAIN_OBJECT_NAME] obj = new [DOMAIN_OBJECT_NAME]();
            //set optional search criteria or omit to return all records
            //obj.Status = "A";

            List<[DOMAIN_OBJECT_NAME]> collection = adapter.LoadCollection(obj);

            //sort collection
            if (e == null)
                collection.Sort(new GenericSorter.GenericComparer<[DOMAIN_OBJECT_NAME]>("[DOMAIN_OBJECT_ID_NAME]", "Ascending", null));
            else
                collection.Sort(new GenericSorter.GenericComparer<[DOMAIN_OBJECT_NAME]>(e.SortExpression, "Ascending", null));

            GridView1.DataSource = collection;
            GridView1.DataBind();
            if (collection.Count == 0)
            {
                GridView1.Visible = false;
                lblMessage.Text = "No entries found.";
            }
            else
            {
                GridView1.Visible = true;
                lblMessage.Text = collection.Count.ToString() + " entry(s) found.";
            }
        }
        catch (Exception ex)
        {
            lblMessage.Text = ex.Message + ". " + ex.StackTrace;
        }
    }
    
    protected void GridView1_Sorting(object sender, GridViewSortEventArgs e)
    {
        bindGrid(e);
    }    
    
    private string keyValue(DataKey dataKey, string keyName, string default_value)
    {
        if (dataKey[keyName] == null || dataKey[keyName].ToString() == "")
            return default_value;
        else
            return dataKey[keyName].ToString();
    }


    protected void GridView1_RowEditing(object sender, GridViewEditEventArgs e)
    {
        GridView1.EditIndex = e.NewEditIndex;
        bindGrid(null);
    }
    protected void GridView1_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {
        GridView1.EditIndex = -1;
        bindGrid(null);
    }
    protected void GridView1_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

        [PKType] id = [PKType].Parse(keyValue(GridView1.DataKeys[e.RowIndex], "[DOMAIN_OBJECT_ID_NAME]", "0"));

		//examples
        //DropDownList ddlState = (DropDownList)GridView1.Rows[e.RowIndex].Cells[0].FindControl("ddlState");
        //TextBox txtCity = (TextBox)GridView1.Rows[e.RowIndex].Cells[1].FindControl("txtCity");


        [DOMAIN_OBJECT_NAME]Adapter adapter = new [DOMAIN_OBJECT_NAME]Adapter();
        [DOMAIN_OBJECT_NAME] obj = new [DOMAIN_OBJECT_NAME]();
        obj.[DOMAIN_OBJECT_ID_NAME] = id;      
        adapter.Load(obj);

		//set properties and call update
		
		//examples
		//obj.State = ddlState.SelectedValue;
		//obj.City = txtCity.Text;
        
        adapter.Update(obj);

        //set back to read mode
        GridView1.EditIndex = -1;
        bindGrid(null);


    }




    protected void GridView1_RowDataBound(object sender, GridViewRowEventArgs e)
    {

        if (e.Row.RowType == DataControlRowType.Header)
        {
        }
        else if (e.Row.RowType == DataControlRowType.DataRow)
        {
            [PKType] id = [PKType].Parse(keyValue(GridView1.DataKeys[e.Row.RowIndex], "[DOMAIN_OBJECT_ID_NAME]", "0"));


            //find Edit and Delete buttons
            ImageButton ibEdit = (ImageButton)e.Row.Cells[GridView1.Columns.Count - 2].Controls[0];
            LinkButton lbDelete = (LinkButton)e.Row.Cells[GridView1.Columns.Count - 1].FindControl("LinkButtonDelete");

            //If in Edit mode, hide all the edit controls in the other rows
            if (GridView1.EditIndex != -1 && e.Row.RowIndex != GridView1.EditIndex)
            {
                lbDelete.Visible = false;
                ibEdit.Visible = false;
            }

            //in order to check just for the Edit mode while ignoring other information, you have to do the following using bit-wise AND operator 
            if ((e.Row.RowState & DataControlRowState.Edit) > 0)
            {
                //hide the Delete button for the row being editing
                lbDelete.Visible = false;

				//example
                //DropDownList ddlTypeID = (DropDownList)e.Row.Cells[0].FindControl("ddlTypeID");

            }  


        }
        else if (e.Row.RowType == DataControlRowType.Footer)
        {
        }

    }

    protected void GridView1_RowDeleting(object sender, GridViewDeleteEventArgs e)
    {
        [PKType] id = [PKType].Parse(keyValue(GridView1.DataKeys[e.RowIndex], "[DOMAIN_OBJECT_ID_NAME]", "0"));

        [DOMAIN_OBJECT_NAME]Adapter adapter = new [DOMAIN_OBJECT_NAME]Adapter();
        [DOMAIN_OBJECT_NAME] obj = new [DOMAIN_OBJECT_NAME]();
        obj.[DOMAIN_OBJECT_ID_NAME] = id;
        adapter.Delete(obj);

        bindGrid(null);
    }

    protected void btnAdd_Click(object sender, EventArgs e)
    {
        [DOMAIN_OBJECT_NAME]Adapter adapter = new [DOMAIN_OBJECT_NAME]Adapter();
        [DOMAIN_OBJECT_NAME] obj = new [DOMAIN_OBJECT_NAME]();
 		
 	//set object properties and insert object       
        //adapter.Insert(obj);
 
	//set last row of grid to edit mode
        GridView1.EditIndex = GridView1.Rows.Count;
        bindGrid(null);
        
    }

}
