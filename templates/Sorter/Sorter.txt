using System;
using System.Collections;
using System.Text;

namespace [DOMAIN_OBJECT_NAMESPACE]
{
    public class [DOMAIN_OBJECT_NAME]Sorter : IComparer
    {

        public enum SortDirection
        {
            Ascending,
            Descending
        }

        private SortDirection m_direction = SortDirection.Ascending;
        private string sort_by = "";


        public [DOMAIN_OBJECT_NAME]Sorter(string sort_by) : base()
        {
            this.sort_by = sort_by;
        }

        public [DOMAIN_OBJECT_NAME]Sorter(SortDirection direction)
        {
            this.m_direction = direction;
        }

        int IComparer.Compare(object x, object y)
        {
            [DOMAIN_OBJECT_NAME] [DOMAIN_OBJECT_NAME]X = ([DOMAIN_OBJECT_NAME])x;
            [DOMAIN_OBJECT_NAME] [DOMAIN_OBJECT_NAME]Y = ([DOMAIN_OBJECT_NAME])y;

            if ([DOMAIN_OBJECT_NAME]X == null && [DOMAIN_OBJECT_NAME]Y == null)
            {
                return 0;
            }
            else if ([DOMAIN_OBJECT_NAME]X == null && [DOMAIN_OBJECT_NAME]Y != null)
            {
                return (this.m_direction == SortDirection.Ascending) ? -1 : 1;
            }
            else if ([DOMAIN_OBJECT_NAME]X != null && [DOMAIN_OBJECT_NAME]Y == null)
            {
                return (this.m_direction == SortDirection.Ascending) ? 1 : -1;
            }
            else
            {
                [SORTER_OBJECT_PROPERTY]
            }
        }


    }


}
